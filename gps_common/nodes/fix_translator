#!/usr/bin/env python3

# Translates from NavSatFix to GPSFix and back

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile
from sensor_msgs.msg import NavSatFix
from sensor_msgs.msg import NavSatStatus
from gps_common.msg import GPSFix
from gps_common.msg import GPSStatus

class fix_translator_node(Node):
    def __init__(self):
        super().__init__("fix_translator")
        self.navsat_pub = self.create_publisher(NavSatFix, 'navsat_fix_out', QoSProfile(depth=10))
        self.gps_pub = self.create_publisher(GPSFix, 'gps_fix_out', QoSProfile(depth=10))

        self.navsat_sub = self.create_subscription(NavSatFix, "navsat_fix_in", self.navsat_callback, QoSProfile(depth=10))
        self.gps_sub = self.create_subscription(GPSFix, "gps_fix_in", self.gps_callback, QoSProfile(depth=10))

    def navsat_callback(self,navsat_msg):
        gps_msg = GPSFix()
        gps_msg.header = navsat_msg.header
        gps_msg.status.status = navsat_msg.status.status

        gps_msg.status.motion_source = GPSStatus.SOURCE_NONE
        gps_msg.status.orientation_source = GPSStatus.SOURCE_NONE
        gps_msg.status.position_source = GPSStatus.SOURCE_NONE
        if ((navsat_msg.status.service & NavSatStatus.SERVICE_GPS) or
            (navsat_msg.status.service & NavSatStatus.SERVICE_GLONASS) or
            (navsat_msg.status.service & NavSatStatus.SERVICE_GALILEO)):
            gps_msg.status.motion_source = gps_msg.status.motion_source | GPSStatus.SOURCE_GPS
            gps_msg.status.orientation_source = gps_msg.status.orientation_source | GPSStatus.SOURCE_GPS
            gps_msg.status.position_source = gps_msg.status.position_source | GPSStatus.SOURCE_GPS
        if (navsat_msg.status.service & NavSatStatus.SERVICE_COMPASS):
            gps_msg.status.orientation_source = gps_msg.status.orientation_source | GPSStatus.SOURCE_MAGNETIC

        gps_msg.latitude=navsat_msg.latitude
        gps_msg.longitude=navsat_msg.longitude
        gps_msg.altitude=navsat_msg.altitude
        gps_msg.position_covariance=navsat_msg.position_covariance
        gps_msg.position_covariance_type=navsat_msg.position_covariance_type
        self.gps_pub.publish(gps_msg)


    # Translates from GPSFix to NavSatFix.
    # As GPSFix can store much more information than NavSatFix,
    # a lot of this additional information might get lost.
    def gps_callback(self,gps_msg):
        navsat_msg = NavSatFix()
        navsat_msg.header = gps_msg.header

        # Caution: GPSFix has defined some additional status
        # constants, which are not defined in NavSatFix.
        navsat_msg.status.status=gps_msg.status.status

        navsat_msg.status.service = 0
        if (gps_msg.status.position_source & GPSStatus.SOURCE_GPS):
            navsat_msg.status.service = navsat_msg.status.service | NavSatStatus.SERVICE_GPS
        if (gps_msg.status.orientation_source & GPSStatus.SOURCE_MAGNETIC):
            navsat_msg.status.service = navsat_msg.status.service | NavSatStatus.SERVICE_COMPASS

        navsat_msg.latitude=gps_msg.latitude
        navsat_msg.longitude=gps_msg.longitude
        navsat_msg.altitude=gps_msg.altitude
        navsat_msg.position_covariance=gps_msg.position_covariance
        navsat_msg.position_covariance_type=gps_msg.position_covariance_type
        self.navsat_pub.publish(navsat_msg)

def main():
    rclpy.init()
    node = fix_translator_node()
    rclpy.spin(node)
    # cleanup
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
